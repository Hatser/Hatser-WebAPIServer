#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('bst-subpage:server');
var http = require('http');
var publicIp = require('public-ip');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

global.config.app_port = port;
if(global.config.proxy_server_port == 0) global.config.proxy_server_port = port;

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port, '0.0.0.0',() => {
	global.config.app_port = server.address().port;
	console.log('Listening on port ' + server.address().port);
});
server.on('error', onError);
server.on('listening', onListening);

/*
var Primus = require('primus');

var primus = new Primus(server, { transformer: 'websockets' });
require('../app/socket/socket')(primus);
*/

var io = require('socket.io').listen(server, {'pingInterval': 25000, 'pingTimeout': 60000});
require('../controllers/server/socket.controller').socket_init(io);

if(global.config.server_domain_name === '') {
	publicIp.v4().then(ip => {
		global.config.server_domain_name = ip;
	});
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
	let port = parseInt(val, 10);

	if (isNaN(port)) {
		// named pipe
		return val;
	}

	if (port >= 0) {
		// port number
		return port;
	}

	return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
	if (error.syscall !== 'listen') {
		throw error;
	}

	var bind = typeof port === 'string'
		? 'Pipe ' + port
		: 'Port ' + port;

	// handle specific listen errors with friendly messages
	switch (error.code) {
	case 'EACCES':
		console.error(bind + ' requires elevated privileges');
		process.exit(1);
		break;
	case 'EADDRINUSE':
		console.error(bind + ' is already in use');
		process.exit(1);
		break;
	default:
		throw error;
	}
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
	var addr = server.address();
	var bind = typeof addr === 'string'
		? 'pipe ' + addr
		: 'port ' + addr.port;
	debug('Listening on ' + bind);
	global.isServerOnline = true;
}
